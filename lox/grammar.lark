?start     : program

program    : stmt*

?stmt      : expr ";"
           | print_cmd
           | decl ";"
           // | if_cmd
           // | for_cmd
           // | ...

print_cmd  : "print" expr ";"
decl   : "var" VAR ("=" expr)?

// EXPRESSÃ•ES
?expr      : assign

?assign    : VAR "=" expr
            | call "." VAR "=" expr -> setattr_
            | logic_or

?logic_or   : logic_and "or" logic_or
            | logic_and

?logic_and  : equality "and" logic_and
            | equality

?equality  : equality "==" cmp  -> eq
           | equality "!=" cmp  -> ne
           | cmp

?cmp       : cmp ">" factor   -> gt
           | cmp "<" factor   -> lt
           | cmp ">=" factor  -> ge
           | cmp "<=" factor  -> le
           | factor

?factor    : factor "+" term  -> add
           | factor "-" term  -> sub
           | term

?term      : term "*" unary   -> mul
           | term "/" unary   -> div 
           | unary

?unary     : "-" unary -> neg
           | "!" unary -> not_
           | call

?call      : call "(" args? ")" -> call
           | call "." VAR -> getattr_
           | atom

?atom      : NUMBER 
           | BOOL
           | VAR
           | STRING
           | NIL
           | "(" expr ")"

args     : [ expr ("," expr )* ]         

BOOL.2     : "true" | "false"
VAR.1      : /[a-z_]\w*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/ 
STRING     : /"[^"]*"/
NIL.2      : "nil"
COMMENT    : "//" /[^\n]*/

%ignore /\s/ | COMMENT